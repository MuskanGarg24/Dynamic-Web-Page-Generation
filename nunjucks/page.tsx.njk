import React from "react";
{% for component in importedComponents %}
import {{ component }} from "../src/components/{{ component }}";
{% endfor %}
import { GatsbySeo } from 'gatsby-plugin-next-seo';
{% if isProtected %}
import axios from "axios"
{% endif %}

interface Data {
    title: string;
    highlightedTitle: string;
    description: string;
    buttonLabel: string;
    data: any[];
    apiEndPoints: any;
    isSSR: string;
}

interface SEO {
    title: string,
    description: string
}

const SeoData: SEO = {
    title: "{{seo.title}}",
    description: "{{seo.description}}"
}

{% for component in components %}
const {{ component.dataVariableName}}: Data = {
    {% for propKey, propValue in component.props %}
    {% if propKey != 'data' and propKey != 'apiEndPoints' %}
    {{ propKey }}: "{{ propValue }}",
    {% endif %}
    {% endfor %}
    data: [
        {% if component.props.data %}
            {% if component.props.data[0] is string %}
                {% for item in component.props.data %}
                    "{{ item }}",
                {% endfor %}
            {% else %}
                {% for item in component.props.data %}
                    { id: {{ item.id }}, name: "{{ item.name }}", value: "{{ item.value }}" },
                {% endfor %}
            {% endif %}
        {% endif %}
    ],
    apiEndPoints: {
        {% for key, value in component.props.apiEndPoints %}
        {{ key }}: "{{ value }}",
        {% endfor %}
    }
};
{% endfor %}

interface ServerDataProps {
    serverData: {
        {% for component in components %}
        {{component.dataVariableName}}: Data;
        {% endfor %}
        SeoData: SEO;
    }
}

const {{ pageName }}: React.FC<ServerDataProps> = ({serverData}) => {

    {% if isProtected %}
    const [loggedIn, setLoggedIn] = React.useState(false);

    React.useEffect(() => {
        const token = localStorage.getItem('token');
        if (token) {
            axios.get("{{ isProtected.verifyToken }}", {
                headers: {
                    Authorization: token
                }
            })
                .then((response) => {
                    console.log(response);
                    setLoggedIn(true);
                })
                .catch((error) => {
                    console.log(error);
                    window.location.href = "{{ isProtected.redirectRoute }}";
                });
        } else {
            window.location.href = "{{ isProtected.redirectRoute }}";
        }
    }, []);
    {% endif %}

    return (
        <>
        <GatsbySeo {...serverData.SeoData} />
        {% if isProtected %}
        {loggedIn ? (
            <>
                {% for component in components %}
                    {% if component.props.isSSR %}
                        <{{ component.componentName }} {...serverData.{{component.dataVariableName}}} />
                    {% else %}
                        <{{ component.componentName }} {...{{ component.dataVariableName }}} />
                    {% endif %}
                {% endfor %}
            </>
        ) : null}
        {% else %}
            {% for component in components %}
                {% if component.props.isSSR %}
                    <{{ component.componentName }} {...serverData.{{component.dataVariableName}}} />
                {% else %}
                    <{{ component.componentName }} {...{{ component.dataVariableName }}} />
                {% endif %}
            {% endfor %}
        {% endif %}
        </>
    );
};
export default {{ pageName }};


export async function getServerData() {
    console.log("Server side rendering of {{pageName}} using templating and script")
    try {
        {% if pageName == "Home" %}
        const res = await fetch(blogs.apiEndPoints.GET_URL);
        const fetchedData = await res.json();
        const blogsData = {
            ...blogs,
            data: [...blogs.data, ...fetchedData.blogs]
        }
        return {
            props: {
                {% for component in components %}
                    {% if component.componentName === "Blogs" %}
                        blogs: blogsData,
                    {% elseif component.props.isSSR %}
                        {{component.dataVariableName}},
                    {% endif %}
                {% endfor %}
                SeoData,
            }
        }
        {% else %}
            return {
                props: {
                    {% for component in components %}
                    {% if component.props.isSSR %}
                    {{component.dataVariableName}},
                    {% endif %}
                    {% endfor %}
                    SeoData,
                }
            };
        {% endif %}
    }
    catch (error) {
        console.log("Error while fetching data for {{pageName}} page", error);
    }
}
